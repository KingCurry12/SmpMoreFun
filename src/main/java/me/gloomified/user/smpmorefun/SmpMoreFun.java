package me.gloomified.user.smpmorefun;import me.gloomified.user.events.*;import me.gloomified.user.stuff.*;import org.bukkit.ChatColor;import org.bukkit.NamespacedKey;import org.bukkit.enchantments.Enchantment;import org.bukkit.entity.Player;import org.bukkit.plugin.java.JavaPlugin;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.HashMap;public  class SmpMoreFun extends JavaPlugin {    public static CustomEnchantments customEnchantments;    public    static ArrayList<Player> players = new ArrayList<Player>();    @Override    public void onEnable() {        getServer().getConsoleSender().sendMessage(ChatColor.translateAlternateColorCodes('&', "&c[Smp&4More&3Fun] &9Made by &3_KingCurry_ "));        customEnchantments = new CustomEnchantments("Explosive_key");        ArmourofGod stuff = new ArmourofGod();        stuff.GodArmour();        ToolsofGOD toolsofGOD = new ToolsofGOD();        toolsofGOD.Tools();        teleport_bow teleport_bow = new teleport_bow();        teleport_bow.bow();        Explosion_Pickaxe explosion_pickaxe = new Explosion_Pickaxe();        explosion_pickaxe.above();        GlowStick glowStick1 = new GlowStick();        glowStick1.above();        Backpack backpack = new Backpack();        backpack.above();        Bleeding_Sword bleeding_sword = new Bleeding_Sword();        bleeding_sword.sword();        Vanish_Hoe vanishHoe = new Vanish_Hoe();        vanishHoe.vanishHoe();        Telepathy_Shovel telepathy_shovel = new Telepathy_Shovel();        telepathy_shovel.telepathyShovel();        getServer().getPluginManager().registerEvents(new EntityDam(), this);        getServer().getPluginManager().registerEvents(new Interact(), this);        getServer().getPluginManager().registerEvents(new Projectile(), this);        getServer().getPluginManager().registerEvents(new Walk(), this);        getServer().getPluginManager().registerEvents(new Join(), this);        getServer().getPluginManager().registerEvents(new Inventory(), this);        getServer().getPluginManager().registerEvents(new BlockPlace(), this);        getConfig().options().copyDefaults();        saveDefaultConfig();        getCommand("Backpack").setExecutor(new me.gloomified.user.commands.Backpack());        getCommand("SmpMoreFun").setExecutor(new me.gloomified.user.commands.Info());        getCommand("SmpMoreFunreload").setExecutor(new me.gloomified.user.commands.reload());        getCommand("vanishtest").setExecutor(new me.gloomified.user.commands.Vanish());        registerEnchantment(customEnchantments);    }    public static void registerEnchantment(Enchantment enchantment) {        boolean registered = true;        try {            Field f = Enchantment.class.getDeclaredField("acceptingNew");            f.setAccessible(true);            f.set(null, true);            Enchantment.registerEnchantment(enchantment);        } catch (Exception e) {            registered = false;            e.printStackTrace();        }        if (registered) {            //good boy        }    }          @Override    public void onDisable() {        try {            Field keyField = Enchantment.class.getDeclaredField("byKey");            keyField.setAccessible(true);            @SuppressWarnings("unchecked")            HashMap<NamespacedKey, Enchantment> byKey = (HashMap<NamespacedKey, Enchantment>) keyField.get(null);            byKey.remove(customEnchantments.getKey());            Field nameField = Enchantment.class.getDeclaredField("byName");            nameField.setAccessible(true);            @SuppressWarnings("unchecked")            HashMap<String, Enchantment> byName = (HashMap<String, Enchantment>) nameField.get(null);            byName.remove(customEnchantments.getName());        } catch (Exception e) {            e.printStackTrace();        }    }}